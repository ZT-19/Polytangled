using System.Collections;
using System.Collections.Generic;
using UnityEngine;




public class OnClickTest : MonoBehaviour
{
    public bool clicked;
    public bool fadefinished;
    public bool connection = false;

    public float childy;

    private float speed = 0.25f;
    private float receiveSpeed = 2;
    private float rate = 2;
    private float maxReceiverHeight = 1.5f;
    
    public int clickTime ;
    private int timesClicked;

    public GameObject child1;
    public GameObject hookr;
    public GameObject hooka;
    public GameObject receiver;

    public GameObject expandBtn;

  
    private LineRenderer[] lineRends;
    

    private SpriteRenderer receiverRend;
    private SpriteRenderer rend;
    private SpriteRenderer expandBtnRend;
    private SpriteRenderer[] childrenRend;

    

    private Color32 applyAll = new Color32(80, 80, 55, 255);
    private Color32 tintCancel = new Color32(255, 255, 255, 255);
    // Start is called before the first frame update
    void Start()
    {
       
        lineRends = GetComponentsInChildren<LineRenderer>();

        //rend = GetComponent<SpriteRenderer>();
        //receiverRend = receiver.GetComponent<SpriteRenderer>();
       // expandBtnRend = expandBtn.GetComponent<SpriteRenderer>();
        childrenRend = GetComponentsInChildren<SpriteRenderer>();
        //Setting all colors to the same thing
        foreach (SpriteRenderer cRend in childrenRend)
        {
            cRend.material.SetColor("_Color", tintCancel);
            cRend.color = applyAll;
        }
        foreach (LineRenderer test in lineRends)
        {

            test.startColor = applyAll;
            test.endColor = applyAll;
        }
       // rend.material.SetColor("_Color", tintCancel);
        //rend.color = applyAll;
        //
        hookr.transform.position = hooka.transform.position;
    }

    private void FixedUpdate()
    {
        hookr.transform.position = hooka.transform.position;
    }

    // Update is called once per frame
    void Update()
    {

    
        childy = child1.transform.localScale.y;
        
        if (clicked)
        {
            if (receiver.transform.localScale.y < maxReceiverHeight)
            {
                Vector3 vc = new Vector3(receiver.transform.localScale.x, receiver.transform.localScale.y + rate * receiveSpeed * Time.deltaTime);
                receiver.transform.localScale = vc;
            }
            if (!connection)
            {
                if (childy > 0)
                {

                    Vector3 vec = new Vector3(child1.transform.localScale.x, childy - rate * speed * Time.deltaTime);
                    child1.transform.localScale = vec;


                }
            }
            if (childy <= 0)
            {
                
                child1.SetActive(false);
                clicked = false;
                StartCoroutine("Fadeout");
                FindObjectOfType<AudioManager>().Play("FadeAway");
                while (receiver.transform.localScale.y > 1)
                {
                    Vector3 cv = new Vector3(receiver.transform.localScale.x, receiver.transform.localScale.y - rate * receiveSpeed * 0.05f * Time.deltaTime);
                    receiver.transform.localScale = cv;

                }
                hookr.SetActive(false);

            } 
            
        }

        if (fadefinished)
        {
            hookr.SetActive(false);
            Destroy(hookr);
            Destroy(gameObject);
            fadefinished = false;

        }

        hookr.transform.position = hooka.transform.position;
    }

    
    void OnMouseDown()
    {

        timesClicked ++;
        
        if (timesClicked <= clickTime)
        {
            FindObjectOfType<AudioManager>().Play("ClickDown");
            
            Vector3 a = new Vector3(expandBtn.transform.localScale.x * 1.25f, expandBtn.transform.localScale.y * 1.25f);
            expandBtn.transform.localScale = a;
            
        }

        clicked = true;
    }


    private void OnMouseUpAsButton()
    {
        if (timesClicked <= clickTime)
        {
            FindObjectOfType<AudioManager>().Play("ClickUp");
            Vector3 b = new Vector3(1.0f, 1.0f);
            expandBtn.transform.localScale = b;
        }

    }

    IEnumerator Fadeout()
    {
        for (float f = 1f; f >= -0.05f; f -= 0.05f)
        {
            foreach (LineRenderer lineRend in lineRends)
            {
                Color h = lineRend.startColor;
                h.a = f;
                lineRend.startColor = h;
                h = lineRend.endColor;
                h.a = f;
                lineRend.endColor = h;
            }
            foreach (SpriteRenderer cRend in childrenRend)
            {
                Color b = cRend.material.color;
                b.a = f;
                cRend.material.color = b;
            }
          /*  Color c = rend.material.color;
            c.a = f;
            rend.material.color = c;

     
            Color e = receiverRend.material.color;
            e.a = f;
            receiverRend.material.color = e;

            Color g = expandBtnRend.material.color;
            g.a = f;
            expandBtnRend.material.color = g;*/

            yield return new WaitForSeconds(0.01f);

        }
        fadefinished = true;

    }


}
     
//Next script

using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.SceneManagement;
using UnityEngine.UI;

public class CurrentLevelManager : MonoBehaviour
{
    private bool fadeFinished;
    private bool playOnce = true;
    private bool secPassed = false;
    public int y;

    private TextMeshProUGUI lvlIndicateText;
    
    public Canvas parentCanvas;
    
    private Color32 textColor = new Color32(80, 80, 55, 255);

    // Start is called before the first frame update
    void Start()
    {
        lvlIndicateText = GetComponentInChildren<TextMeshProUGUI>();

    }

    // Update is called once per frame
    void Update()
    {

        y = SceneManager.GetActiveScene().buildIndex;
          if (transform.childCount <= 1)
          {
            StartCoroutine("Wait1Sec");
            if (secPassed)
            {
                
                y++;
                /*if (playOnce)
                {
                    FindObjectOfType<AudioManager>().Play("NextLevelTone");
                    playOnce = false;
                }
                lvlIndicateText.color = textColor;
                lvlIndicateText.text = (y).ToString();
                StartCoroutine("TextFade");
                */
                if (y <= SceneManager.sceneCountInBuildSettings - 1)
                {
                    if (playOnce)
                    {
                        FindObjectOfType<AudioManager>().Play("NextLevelTone");
                        playOnce = false;
                    }
                    lvlIndicateText.color = textColor;
                    lvlIndicateText.text = (y).ToString();
                    StartCoroutine("TextFade");
                    if (fadeFinished)
                    {
                        SceneManager.LoadScene(y);
                        Debug.Log(y);//does not show current scene, but the scene about to be loaded
                    }
                }
                if (y > SceneManager.sceneCountInBuildSettings - 1)
                {
                    if (playOnce)
                    {
                        FindObjectOfType<AudioManager>().Play("NextLevelTone");
                        playOnce = false;
                    }
                    lvlIndicateText.color = textColor;
                    lvlIndicateText.text = "Thanks for playing! Source code in desc :)";
                    
                    StartCoroutine(TextFade());
                    StartCoroutine(Back2Menu());
                }
                secPassed = false;
            }
            
       
          }
    }



    IEnumerator TextFade()
    {
        for (float f = 0; f <= 1.0f; f+= 0.01f)
        {
            Color c = lvlIndicateText.color;
            c.a = f;
            lvlIndicateText.color = c;

            yield return new WaitForSeconds(0.01f);
        }
        for (float f = 1.0f; f >= -0.05; f -= 0.01f)
        {
            Color c = lvlIndicateText.color;
            c.a = f;
            lvlIndicateText.color = c;

            yield return new WaitForSeconds(0.01f);
        }
        fadeFinished = true;
    }

    IEnumerator Wait1Sec()
    {
        yield return new WaitForSeconds(1f);
        secPassed = true;
    }
    IEnumerator TextFadeIn()
    {
        for (float f = 0; f <= 1.0f; f += 0.01f)
        {
            Color c = lvlIndicateText.color;
            c.a = f;
            lvlIndicateText.color = c;

            yield return new WaitForSeconds(0.01f);
        }
    }
    IEnumerator Back2Menu()
    {
        yield return new WaitForSeconds(4.0f);
        SceneManager.LoadScene(0);
    }
}

//Next Script

using UnityEngine.Audio;
using System;
using UnityEngine;
using UnityEngine.SceneManagement;

public class AudioManager : MonoBehaviour
{

	public static AudioManager instance;

	public AudioMixerGroup mixerGroup;

	public Sound[] sounds;

	void Awake()
	{
		if (instance != null)
		{
			Destroy(gameObject);
		}
		else
		{
			instance = this;
			DontDestroyOnLoad(gameObject);
		}

		foreach (Sound s in sounds)
		{
			s.source = gameObject.AddComponent<AudioSource>();
			s.source.clip = s.clip;
			s.source.loop = s.loop;

			s.source.outputAudioMixerGroup = mixerGroup;
		}
	}

	private void Start()
	{
		
			Play("Theme");
		
	}

	public void Play(string sound)
	{
		Sound s = Array.Find(sounds, item => item.name == sound);
		if (s == null)
		{
			Debug.LogWarning("Sound: " + name + " not found!");
			return;
		}

		s.source.volume = s.volume * (1f + UnityEngine.Random.Range(-s.volumeVariance / 2f, s.volumeVariance / 2f));
		s.source.pitch = s.pitch * (1f + UnityEngine.Random.Range(-s.pitchVariance / 2f, s.pitchVariance / 2f));

		s.source.Play();
	}

}

//Next Script

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;
using TMPro;
using UnityEditor;

public class Menu2Game : MonoBehaviour
{
    private Vector3 startPos = new Vector3(0, 1, -2);
    private bool fadeFinished1 = false;
    private bool fadeFinished2 = false;
    private SpriteRenderer screenRend;
    //private SpriteRenderer menuRend;
    private TextMeshProUGUI menuText;
    //public GameObject menuText;
    // Start is called before the first frame update
    void Start()
    {
        transform.position = startPos;
        //menuRend = menuText.GetComponent<SpriteRenderer>();
        menuText = GetComponentInChildren<TextMeshProUGUI>();
        //Color b = menuText.color;
        //b.a = 0;
        //menuText.color = b;
        screenRend = GetComponent<SpriteRenderer>();
        Color c = screenRend.material.color;
        c.a = 0;
        screenRend.material.color = c;

        StartCoroutine("FadeTextIn");

    }

    // Update is called once per frame
    void Update()
    {
        if(GameObject.FindGameObjectsWithTag("Play Button").Length == 0)
        {
            //StartCoroutine("FadeMenuOut");
            StartCoroutine("FadeTextOut");
            StartCoroutine("FadeScreenOut");
            if (fadeFinished1 && fadeFinished2)
            {
                SceneManager.LoadScene("Level1");
            }
        }   
    }
    IEnumerator FadeScreenOut()
    {
        for (float f = 0f; f <= 1f; f += 0.01f)
        {
            Color c = screenRend.material.color;
            c.a = f;
            screenRend.material.color = c;

            yield return new WaitForSeconds(0.01f);
        }
        fadeFinished1 = true;
        
    }
    /*IEnumerator FadeMenuOut()
    {
        for (float a = 1f; a >= -0.05; a -= 0.05f)
        {
            Color d = menuRend.material.color;
            d.a = a;
            menuRend.material.color = d;

            yield return new WaitForSeconds(0.02f);
        }
        fadeFinished2 = true;

    }*/

    IEnumerator FadeTextIn()
    {
        Debug.Log("A");
        for (float a = 0f; a <= 1f; a += 0.01f)
        {
            Color d = menuText.color;
            d.a = a;
            menuText.color = d;
            yield return new WaitForSeconds(0.01f);
        }
    }
    IEnumerator FadeTextOut()
    {
        for(float a = 1f; a >= 0f; a -= 0.01f)
        {
            Color f = menuText.color;
            f.a = a;
            menuText.color = f;
            yield return new WaitForSeconds(0.01f);
        }
        fadeFinished2 = true;
    }
}

//Next Script

using JetBrains.Annotations;
using System.Collections;
using System.Collections.Generic;
using UnityEngine;
using UnityEngine.SceneManagement;

public class ScreenFadeOut : MonoBehaviour
{

    public int numberOfTFS;
    public Color c;
    private Vector3 startPos = new Vector3(0, 0, -1);
   
    public int orderOfFade = 0;
    private SpriteRenderer screenRend;
    // Start is called before the first frame update
    void Start()
    {
        transform.position = startPos;

        screenRend = gameObject.GetComponent<SpriteRenderer>();
        /*Color c = screenRend.material.color;
        c.a = 1f;
        screenRend.material.color = c;*/


        //gameObject.SetActive(false);
        StartCoroutine("FadeScreenIn");
    }

 

    // Update is called once per frame
    void Update()
    {

        

        numberOfTFS = GameObject.FindGameObjectsWithTag("TFS").Length;
        if (GameObject.FindGameObjectsWithTag("TFS").Length > 0)
        {

            StartCoroutine("FadeScreenOut");


          

                
            

            for (int a = 0; a <= GameObject.FindGameObjectsWithTag("TFS").Length; a += 1)
            {
                Destroy(GameObject.FindGameObjectWithTag("TFS"));
            }


        }

    }
    public IEnumerator FadeScreenOut()
    {
        for (float f = -0.05f; f <= 1.0; f += 0.01f)
        {
            c = screenRend.material.color;
            c.a = f;
            screenRend.material.color = c;

            yield return new WaitForSeconds(0.01f);
        }

        
        Scene scene = SceneManager.GetActiveScene();
        SceneManager.LoadScene(scene.name);


    }

   public IEnumerator FadeScreenIn()
    {
        for (float a = 1.0f; a >= -0.05; a -= 0.01f)
        {
            c = screenRend.material.color;
            c.a = a;
            screenRend.material.color = c;
            yield return new WaitForSeconds(0.01f);
        }


    }


        
    
        
    
}

//Next Script

using System.Collections;
using System.Collections.Generic;
using TMPro;
using UnityEngine;
using UnityEngine.SceneManagement;





public class OnCollision : MonoBehaviour
{

    public GameObject TrueForScreen;
    public GameObject btn;

    private OnClickTest[] reference;
    //private OnClickTest scriptRef;
    // Start is called before the first frame update
    void Start()
    {
        reference = GetComponentsInParent<OnClickTest>();
        //scriptRef = btn.GetComponent<OnClickTest>();
    }

    // Update is called once per frame
    void Update()
    {

    }
    private void OnTriggerEnter2D(Collider2D collision)
    {

       
  
        if (collision.gameObject.tag != gameObject.tag)
        {
            FindObjectOfType<AudioManager>().Play("CollideError");
            foreach (OnClickTest scriptRef in reference)
            {
                scriptRef.connection = true;
                
            }
            
            Instantiate(TrueForScreen);
            
        }

    }


}

//Next Script

using System.Collections;
using System.Collections.Generic;
using UnityEngine;
public class FadeOut : MonoBehaviour
{
    private SpriteRenderer render;
    public GameObject btnRef;
    public bool fClicked;
    public float Fchildy;
    // Start is called before the first frame update
    void Start()
    {
        render = GetComponent<SpriteRenderer>();
    }

    // Update is called once per frame
    void Update()
    {

        
        //GameObject btnRef = GameObject.Find("Button (2)");
        OnClickTest scriptRef = btnRef.GetComponent<OnClickTest>();
        fClicked = scriptRef.clicked;
        Fchildy = scriptRef.childy;
        if (fClicked)
        {
            if (Fchildy <= 0.01)
            {

                StartCoroutine("FadeoutF");
            }
            
        }
                  
        

    }
    IEnumerator FadeoutF()
    {
        
        OnClickTest scriptRef = btnRef.GetComponent<OnClickTest>();
        for (float f = 1f; f >= -0.05f; f -= 0.05f)
        {
            Color c = render.material.color;
            c.a = f;
            render.material.color = c;

            yield return new WaitForSeconds(0.01f);

        }
        scriptRef.fadefinished = true;

    }
}

//Next Script

using UnityEngine.Audio;
using UnityEngine;

[System.Serializable]
public class Sound
{

	public string name;

	public AudioClip clip;

	[Range(0f, 1f)]
	public float volume = .75f;
	[Range(0f, 1f)]
	public float volumeVariance = .1f;

	[Range(.1f, 3f)]
	public float pitch = 1f;
	[Range(0f, 1f)]
	public float pitchVariance = .1f;

	public bool loop = false;

	public AudioMixerGroup mixerGroup;

	[HideInInspector]
	public AudioSource source;

}

//If u read this u gay lol


    
